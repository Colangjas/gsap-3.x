doctype html
head
    meta(charset='UTF-8')
    meta(http-equiv='X-UA-Compatible' content='IE=edge')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title Gsap initial dev
    style.
        @font-face { font-family: CharterOak; src: url('../fonts/CharterOak-Normal.otf'); }
        * {
        box-sizing: border-box;
        }
        body {
        background-color: #222222;
        padding: 0;
        margin: 0;
        font-family: 'Istok Web', sans-serif;
        font-weight: 300;
        height: 100vh;
        overflow: hidden;
        }
        .container {
            display: flex;
            height: 100vh;
            width: 100%;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }
        .container .row {
            display: flex;
            height: 50vh;
            width: 100%;
            justify-content: center;
            align-items: flex-end;
            overflow: hidden;
        }
        .container .row:nth-child(2) {
            
            align-items: flex-start;
        }
        .container.grid, .container.columns {
        align-content: stretch;
        align-items: stretch;
        flex-wrap: wrap;
        }
        .letter {
        font-family: 'Audiowide', cursive;
        text-align: center;
        color: black;
        font-size: 10vmax;
        font-weight: 400;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2px 6px;
        }
        .container.grid .letter {
        flex-basis: 50%;
        }
        .container.columns .letter {
        flex-basis: 25%;
        }
        .get, .clean, .car {
        font-size: 5vmax;
        font-family: CharterOak;
        color: white;
        }
        .get {
        padding: 2px 1.6vmax;
        font-weight: 300;
        display: none;
        }
        .clean {
        padding: 2px 0;
        font-weight: 600;
        display: none;
        }
        .car {
            color: #f7ca18;
            text-align: center;
        }


        .container.final .get,
        .container.final .clean {
            display: block;
        }
        .container.final .car {
            display: none;
        }
        .e,
        .x,
        .t,
        .r,
        .m {
        background: #f7ca18;
        }
        .container.plain .letter {
        background: transparent;
        color: #b200fd;
        padding: 0;
        }
        .logo {
        position: fixed;
        width: 60px;
        bottom: 20px;
        right: 30px;
        }
    script(src='https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/gsap-latest-beta.min.js')
    script(src='https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/Flip.min.js')
    link(rel='preconnect' href='https://fonts.googleapis.com')
    link(rel='preconnect' href='https://fonts.gstatic.com' crossorigin='')
    link(href='https://fonts.googleapis.com/css2?family=Audiowide&family=Istok+Web:ital,wght@1,700&display=swap' rel='stylesheet')

.container.final
    .row
        .get Get the
        .letter.e E
        .letter.x X
        .letter.t T
        .letter.r R
        .letter.e E
        .letter.m M
        .letter.e E
        .letter.wheel
            img(src="/img/wheel.svg", alt="", style="width: 10vmax; height: auto;")
        .clean Clean
    .row
        .car Car Cleaning
script.
    gsap.registerPlugin(Flip);
    let layouts = ["final", "plain"],
    container = document.querySelector(".container"),
    curLayout = 0; // index of the current layout
    function nextState() {
    const state = Flip.getState(".letter, .get, .clean, .car", {props: "color,backgroundColor", simple: true}); // capture current state
    container.classList.remove(layouts[curLayout]); // remove old class
    curLayout = (curLayout + 1) % layouts.length;   // increment (loop back to the start if at the end)
    container.classList.add(layouts[curLayout]);    // add the new class
    Flip.from(state, { // animate from the previous state
    absolute: true,
    stagger: 0.07,
    duration: 0.7,
    ease: "power2.inOut",
    spin: curLayout === 0, // only spin when going to the "final" layout
    simple: true,
    onEnter: (elements, animation) => gsap.fromTo(elements, {opacity: 0}, {opacity: 1, delay: animation.duration() - 0.1}),
    onLeave: elements => gsap.to(elements, {opacity: 0})
    });
    gsap.delayedCall(curLayout === 0 ? 3.5 : 1.5, nextState);
    }
    gsap.delayedCall(1, nextState);
